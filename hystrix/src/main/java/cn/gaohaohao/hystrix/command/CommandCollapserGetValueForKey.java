package cn.gaohaohao.hystrix.command;

 1public class CommandCollapserGetValueForKey extends HystrixCollapser<List<String>, String, Integer> {   2    private final Integer key;   3    public CommandCollapserGetValueForKey(Integer key) {   4        this.key = key;   5    }   6    @Override   7    public Integer getRequestArgument() {   8        return key;   9    }  10    @Override  11    protected HystrixCommand<List<String>> createCommand(final Collection<CollapsedRequest<String, Integer>> requests) {  12        //创建返回command对象  13        return new BatchCommand(requests);  14    }  15    @Override  16    protected void mapResponseToRequests(List<String> batchResponse, Collection<CollapsedRequest<String, Integer>> requests) {  17        int count = 0;  18        for (CollapsedRequest<String, Integer> request : requests) {  19            //手动匹配请求和响应  20            request.setResponse(batchResponse.get(count++));  21        }  22    }  23    private static final class BatchCommand extends HystrixCommand<List<String>> {  24        private final Collection<CollapsedRequest<String, Integer>> requests;  25        private BatchCommand(Collection<CollapsedRequest<String, Integer>> requests) {  26                super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"))  27                    .andCommandKey(HystrixCommandKey.Factory.asKey("GetValueForKey")));  28            this.requests = requests;  29        }  30        @Override  31        protected List<String> run() {  32            ArrayList<String> response = new ArrayList<String>();  33            for (CollapsedRequest<String, Integer> request : requests) {  34                response.add("ValueForKey: " + request.getArgument());  35            }  36            return response;  37        }  38    }  39    public static class UnitTest {  40        HystrixRequestContext context = HystrixRequestContext.initializeContext();  41        try {  42            Future<String> f1 = new CommandCollapserGetValueForKey(1).queue();  43            Future<String> f2 = new CommandCollapserGetValueForKey(2).queue();  44            Future<String> f3 = new CommandCollapserGetValueForKey(3).queue();  45            Future<String> f4 = new CommandCollapserGetValueForKey(4).queue();  46            assertEquals("ValueForKey: 1", f1.get());  47            assertEquals("ValueForKey: 2", f2.get());  48            assertEquals("ValueForKey: 3", f3.get());  49            assertEquals("ValueForKey: 4", f4.get());  50            assertEquals(1, HystrixRequestLog.getCurrentRequest().getExecutedCommands().size());  51            HystrixCommand<?> command = HystrixRequestLog.getCurrentRequest().getExecutedCommands().toArray(new HystrixCommand<?>[1])[0];  52            assertEquals("GetValueForKey", command.getCommandKey().name());  53            assertTrue(command.getExecutionEvents().contains(HystrixEventType.COLLAPSED));  54            assertTrue(command.getExecutionEvents().contains(HystrixEventType.SUCCESS));  55        } finally {  56         context.shutdown();  57        }     58    }  59}  